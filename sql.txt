WITH RECURSIVE column_relations AS (
    -- 起点：获取给定表名对应表的所有列，作为初始源列
    SELECT 
        c.id AS source_column_id,
        l.name AS source_layer,
        t.name AS source_table_name,
        c.name AS source_column_name,
        NULL::int AS target_column_id,  -- 初始时没有目标列
        NULL::varchar AS target_table_name,
        NULL::varchar AS target_layer,
        NULL::varchar AS target_column_name,
        0 AS depth  -- 初始层级为0
    FROM 
        meta_entity_table t
    JOIN 
        meta_entity_table_column c ON t.id = c.table_id
    JOIN 
        meta_entity_layer l ON t.layer_id = l.id
    WHERE 
        t.name = 'my_table'  -- 输入表名作为起点

    UNION ALL

    -- 递归：向下查找下游列
    SELECT 
        c_source.id AS source_column_id,
        l_source.name AS source_layer,
        t_source.name AS source_table_name,
        c_source.name AS source_column_name,
        c_target.id AS target_column_id,
        t_target.name AS target_table_name,
        l_target.name AS target_layer,
        c_target.name AS target_column_name,
        cr.depth + 1 AS depth  -- 递归深度加1
    FROM 
        column_relations cr  -- 递归引用
    JOIN 
        meta_entity_transition tr ON cr.source_column_id = tr.source_id  -- 通过源列ID递归
    JOIN 
        meta_entity_table_column c_source ON tr.source_id = c_source.id  -- 递归中的源列
    JOIN 
        meta_entity_table t_source ON c_source.table_id = t_source.id  -- 递归中的源表
    JOIN 
        meta_entity_layer l_source ON t_source.layer_id = l_source.id  -- 递归中的源表的层

    JOIN 
        meta_entity_table_column c_target ON tr.target_id = c_target.id  -- 递归中的目标列
    JOIN 
        meta_entity_table t_target ON c_target.table_id = t_target.id  -- 目标表
    JOIN 
        meta_entity_layer l_target ON t_target.layer_id = l_target.id  -- 目标表的层
)

-- 最终查询结果
SELECT DISTINCT 
    cr.source_layer,
    cr.source_table_name,
    cr.source_column_name,
    cr.target_layer,
    cr.target_table_name,
    cr.target_column_name
FROM 
    column_relations cr
WHERE 
    cr.target_column_id IS NOT NULL  -- 排除没有目标的记录
ORDER BY 
    cr.depth;